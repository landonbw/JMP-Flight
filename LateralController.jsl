course_integrator = 0.0;
course_e_d1 = 0.0;
chi_dot = 0.0;
chi_d1 = 0.0;



///////////////////////////////////////////////////////////////////////////////////////////
                //	Saturate a value
///////////////////////////////////////////////////////////////////////////////////////////
saturate_val = function({value, max_value},
	if (Abs(value) > max_value,
		saturated_value = (value / Abs(value)) * max_value,
		//else
		saturated_value = value);
	return(saturated_value);
);


///////////////////////////////////////////////////////////////////////////////////////////
                //	Lateral Control
///////////////////////////////////////////////////////////////////////////////////////////
lateral_control = function({state, commanded_course, flight_state, phi_ff=0.0},
	vg_fs = flight_state.item(0);
	beta_fs = flight_state.item(2);
	heading_fs = flight_state.item(4);
	
	phi_c = course_control_loop(heading_fs, commanded_course, phi_ff);
	delta_a = roll_control_loop(state, phi_c);
	//delta_r = 
);


///////////////////////////////////////////////////////////////////////////////////////////
                //	Roll Control Loop
///////////////////////////////////////////////////////////////////////////////////////////
roll_control_loop = function({state, phi_c},
	delta_a_max = 1;
	kp_roll = 1;
	kd_roll = 1;
	phi = state[6];
	p = state[10];
	phi_error = phi_c - phi;
	delta_a_prime = phi_error + kp_roll;
	delta_a_unsaturated = delta_a_prime - kd_roll * p;
	delta_a = saturate_val(delta_a_unsaturated, delta_a_max);
	return(delta_a);
);


///////////////////////////////////////////////////////////////////////////////////////////
                //	Course Control Loop
///////////////////////////////////////////////////////////////////////////////////////////
course_control_loop = function({chi, chi_c, phi_ff=0},
	phi_c_max = 1;
	a = (2.0 * sigma - ts_control) / (2.0 * sigma + ts_control)
	a2 = 2.0 / (2.0 * sigma + ts_control)
	chi_error = chi_c - chi;
	kp_phi = 1;
	kd_chi = 1;
	ki_chi = 1;
	error1 = chi_c - chi;
	error2 = unit_circle_compliment(error1);
	if(error1<=error2, error=error1, error=error2);
	show(error);
	course_integrator += (ts_simulation / 2.0) * (error + course_e_d1);
	chi_dot = a * chi_dot + a2 + (chi_d1 - chi);
	phi_c_unsat = kp_phi * error + kd_chi * chi_dot + ki_chi * course_integrator + phi_ff;
	course_e_d1 = error;
	chi_d1 = chi;
	phi_c = saturate(phi_c_unsat);
	show(course_integrator);
	course_integrator = course_integrator + (ts_control / ki_chi) * (phi_c - phi_c_unsat)
	return(phi_c)
	show(ts_simulation);
);


///////////////////////////////////////////////////////////////////////////////////////////
                //	Sideslip Control Loop
///////////////////////////////////////////////////////////////////////////////////////////
sideslip_integrator = 0.0;
sideslip_error_d1;
sideslip_kp = 1;
sideslip_ki = 1;
delta_r_max = 0.5;

sideslip_control_loop = function({beta},
	beta_c = 0.0;
	
	error1 = beta_c - beta;
	error2 = unit_circle_compliment(error1);
	if(error1<=error2, error=error1, error=error2);
	sideslip_integrator += (ts_control / 2.0) * (error + sideslip_error_d1);
	
	delta_r_unsat = sideslip_kp * error - sideslip_ki * sideslip_integrator;
	sideslip_error_d1 = error;
	delta_r = saturate(delta_r_unsat, delta_r_max);
	
	sideslip_integrator = sideslip_integrator + (ts_control / sideslip_ki) * (delta_r - delta_r_unsat);
	return(delta_r);
);


///////////////////////////////////////////////////////////////////////////////////////////
                //	Unit Circle Compliment
///////////////////////////////////////////////////////////////////////////////////////////

unit_circle_compliment = function({angle},
	ucc_sign = angle / Abs(angle);
	compliment_angle = ucc_sign * (Abs(angle) - 2.0 * 3.14159265359);
	return(compliment_angle);
);

///////////////////////////////////////////////////////////////////////////////////////////
                //	testing things
///////////////////////////////////////////////////////////////////////////////////////////

show(saturate_val(1,3));
show(saturate_val(41,3));
show(saturate_val(-11,3));
show(saturate_val(-2.99,3));
show(unit_circle_compliment(0.1));
course_control_loop(1,2,3);
course_control_loop(1,2,3);
course_control_loop(1,2,3);
course_control_loop(1,2,3);
course_control_loop(1,2,3);
course_control_loop(1,2,3);
