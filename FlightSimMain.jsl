//Clear Globals();
Clear Log();

Include( "Parameters_v2.jsl" );
Include( "TableManager.jsl" );
Include( "Simulator.jsl" );
Include( "Controller.jsl" );
Include( "LateralController.jsl" );
Include( "LongitudinalController.jsl" );
Include( "PathFollower.jsl" );
Include( "PathManager.jsl" );
Include( "PathPlannerStraightLines.jsl" );
//make table to record the state through time
data_table = createTable_func();

//make the gui

//calculate the flight path

// loop for each step of the program
ii = 0;
time = 0;
state = Matrix( {Pn, Pe, Pd, u, v, w, phi, theta, psi, p, q, r} );

waypoint_mat = find_path(matrix({endpointgoal*1.1, endpointgoal*1.1}), matrix({Pn, Pe, Pd}), matrix({endpointgoal, endpointgoal, Pd}));
end_reached = 0;




//For( ii = 1, ii < 20000, ii++,
while(!end_reached,
 ii++;
 if(mod(ii, 1000) == 0,
	show(ii);
 );
 
	va = Sqrt( state[4] ^ 2 + state[5] ^ 2 + state[6] ^ 2 );
	alpha = ArcTan( state[6] / state[4] );
	beta = ArcSine( state[5] / va );
	flight_state = Matrix( {va, alpha, beta, 0, state[9]} );
	pos = Matrix( {state[1], state[2], state[3]} );
	
	//path manager for path
	//wayp1 = Matrix( {0, -50, -200} );
	//wayp2 = Matrix( {300, 0, -120} );
	//wayp3 = Matrix( {0, 300, -200} );
	//wayp4 = Matrix( {100, 400, -230} );
	//wayp5 = Matrix( {-50, -500, -200} );
	//waypoint_list = List( wayp1, wayp2, wayp3, wayp4, wayp5 );
	//waypoint_mat = wayp1` |/ wayp2` |/ wayp3` |/ wayp4` |/ wayp5`;
	//waypoint_mat = wayp1` |/ wayp5`;
	y_manager = get_path_straight_line_func( waypoint_mat, pos` );
	//show(y_manager);
	
	//path follower for desired flight state
	//y_manager = [flag, vg_des, r, q_past, center, rho, direction]
	//y_manager = list(0, 35, list(0, 40, -20), list(1, 1, 0), list(0, 0, -20), 20, 1);
	path_follow_commands = follow_path_func( y_manager, pos, state[9], state[9] );
	
	//autopilot for control inputs
	h_req = path_follow_commands[1];
	course_req = path_follow_commands[2];
	phi_ff = path_follow_commands[3];
	//show(path_follow_commands);
	
	deltaA = lateralControl( state, course_req, flight_state );
	lon_ret = longitudinalControl( state, flight_state, h_req, 35 );
	deltaE = lon_ret[1];
	deltaT = lon_ret[2];
	//simulator for plane response
	For( jj = 0, jj < num_steps, jj++,
		forces = getForces_func( state );

		state = updateState_func( state, forces );
	);

	time += ts_simulation;
	//Show( time );
	updateTable_func( data_table, state );

	//Wait( 0.00001 );
);

///////////////////////// Show the data table
data_table << ShowWindow( 1 );

//////////////////////// Plot some of the results
Fit Group(
	Bivariate(
		Y( :Pn_col ),
		X( :time_col ),
		SendToReport( Dispatch( {}, "Bivar Plot", FrameBox, {Marker Size( 0 )} ) )
	),
	Bivariate(
		Y( :Pe_col ),
		X( :time_col ),
		SendToReport( Dispatch( {}, "Bivar Plot", FrameBox, {Marker Size( 0 )} ) )
	),
	Bivariate(
		Y( :Pd_col ),
		X( :time_col ),
		SendToReport( Dispatch( {}, "Bivar Plot", FrameBox, {Marker Size( 0 )} ) )
	),
	Bivariate(
		Y( :u_col ),
		X( :time_col ),
		SendToReport( Dispatch( {}, "Bivar Plot", FrameBox, {Marker Size( 0 )} ) )
	),
	Bivariate(
		Y( :v_col ),
		X( :time_col ),
		SendToReport( Dispatch( {}, "Bivar Plot", FrameBox, {Marker Size( 0 )} ) )
	),
	Bivariate(
		Y( :w_col ),
		X( :time_col ),
		SendToReport( Dispatch( {}, "Bivar Plot", FrameBox, {Marker Size( 0 )} ) )
	),
	Bivariate(
		Y( :phi_col ),
		X( :time_col ),
		SendToReport( Dispatch( {}, "Bivar Plot", FrameBox, {Marker Size( 0 )} ) )
	),
	Bivariate(
		Y( :theta_col ),
		X( :time_col ),
		SendToReport( Dispatch( {}, "Bivar Plot", FrameBox, {Marker Size( 0 )} ) )
	),
	Bivariate(
		Y( :psi_col ),
		X( :time_col ),
		SendToReport( Dispatch( {}, "Bivar Plot", FrameBox, {Marker Size( 0 )} ) )
	), 
/*	Bivariate(
		Y( :p_col ),
		X( :time_col ),
		SendToReport( Dispatch( {}, "Bivar Plot", FrameBox, {Marker Size( 0 )} ) )
	),
	Bivariate(
		Y( :q_col ),
		X( :time_col ),
		SendToReport( Dispatch( {}, "Bivar Plot", FrameBox, {Marker Size( 0 )} ) )
	),
	Bivariate(
		Y( :r_col ),
		X( :time_col ),
		SendToReport( Dispatch( {}, "Bivar Plot", FrameBox, {Marker Size( 0 )} ) )
	),*/
	<<{Arrange in Rows( 3 )}
);
