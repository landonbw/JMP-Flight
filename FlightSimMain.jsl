clear globals();
clear log();

Include( "Parameters.jsl" );
Include( "TableManager.jsl" );
Include( "Simulator.jsl" );
Include( "Controller.jsl" );
Include( "LateralController.jsl" );
Include( "LongitudinalController.jsl");
//make table to record the state through time
data_table = createTable_func();

//make the gui

//calculate the flight path

// loop for each step of the program
ii = 0;
time = 0;
state = Matrix( {Pn, Pe, Pd, u, v, w, phi, theta, psi, p, q, r} );
For( ii = 1, ii < 10000, ii++, 
	//path manager for path
	
	//path follower for desired flight state
	
	//autopilot for control inputs
	//flight_state - va, alpha, beta, pathangle, heading
	va = sqrt(state[4]^2 + state[5]^2 + state[6]^2);
	alpha = ArcTan(state[6]/state[4]);
	beta = ArcSine(state[5]/va);
	flight_state = matrix({va, alpha, beta, 0, state[9]});
	if(time>5000, h_req=400, h_req=20);
	if(time>2500, course_req=0.4, course_req=0.0);
	deltaA = lateralControl(state, course_req, flight_state);
	lon_ret = longitudinalControl(state, flight_state, h_req, 35);
	deltaE = lon_ret[1];
	deltaT = lon_ret[2];
	//simulator for plane response
	forces = getForces_func( state );

	state = updateState_func( state, forces );

	time += ts_simulation;
	//Show( time );
	updateTable_func( data_table, state );
	/*data << Add Rows({:time_col=time, :Pn_col=Pn, :Pe_col=Pe, :Pd_col=Pd, :u_col=u,
		:v_col=v, :w_col=w, :phi_col=phi, :theta_col=theta, :psi_col=psi, :p_col=p,
		:q_col=q, :r_col=r});*/
	//draw the plane in the gui
	Wait( 0.00001 );
);

///////////////////////// Show the data table
data_table << ShowWindow(1);

//////////////////////// Plot some of the results
Fit Group(
	Bivariate(
		Y( :Pn_col ),
		X( :time_col ),
		SendToReport( Dispatch( {}, "Bivar Plot", FrameBox, {Marker Size( 0 )} ) )
	),
	Bivariate(
		Y( :Pe_col ),
		X( :time_col ),
		SendToReport( Dispatch( {}, "Bivar Plot", FrameBox, {Marker Size( 0 )} ) )
	),
	Bivariate(
		Y( :Pd_col ),
		X( :time_col ),
		SendToReport( Dispatch( {}, "Bivar Plot", FrameBox, {Marker Size( 0 )} ) )
		),
	Bivariate(
		Y( :u_col ),
		X( :time_col ),
		SendToReport( Dispatch( {}, "Bivar Plot", FrameBox, {Marker Size( 0 )} ) )
	),
	Bivariate(
		Y( :v_col ),
		X( :time_col ),
		SendToReport( Dispatch( {}, "Bivar Plot", FrameBox, {Marker Size( 0 )} ) )
	),
	Bivariate(
		Y( :w_col ),
		X( :time_col ),
		SendToReport( Dispatch( {}, "Bivar Plot", FrameBox, {Marker Size( 0 )} ) )
		),
	Bivariate(
		Y( :phi_col ),
		X( :time_col ),
		SendToReport( Dispatch( {}, "Bivar Plot", FrameBox, {Marker Size( 0 )} ) )
	),
	Bivariate(
		Y( :theta_col ),
		X( :time_col ),
		SendToReport( Dispatch( {}, "Bivar Plot", FrameBox, {Marker Size( 0 )} ) )
	),
	Bivariate(
		Y( :psi_col ),
		X( :time_col ),
		SendToReport( Dispatch( {}, "Bivar Plot", FrameBox, {Marker Size( 0 )} ) )
		),
/*	Bivariate(
		Y( :p_col ),
		X( :time_col ),
		SendToReport( Dispatch( {}, "Bivar Plot", FrameBox, {Marker Size( 0 )} ) )
	),
	Bivariate(
		Y( :q_col ),
		X( :time_col ),
		SendToReport( Dispatch( {}, "Bivar Plot", FrameBox, {Marker Size( 0 )} ) )
	),
	Bivariate(
		Y( :r_col ),
		X( :time_col ),
		SendToReport( Dispatch( {}, "Bivar Plot", FrameBox, {Marker Size( 0 )} ) )
	),*/
	<<{Arrange in Rows( 3 )}
);
