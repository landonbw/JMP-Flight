

generate_random_point = function({map, height_c_planner},
	//map[1] = x limit
	//map[2] = y limit
	rand_x_gen = random uniform() * map[1];
	rand_y_gen = random uniform() * map[2];
	random_point_gen = matrix({rand_x_gen, rand_y_gen, height_c_planner});	
);



find_nearest_point = function({points, new_point},
	shortest_point = matrix({-1, -1, -1});
	shortest_dist = 99999999999;
	shortest_idx = -1;
	ang = 0;
	for(i=1, i<=nrow(points), i++,

		check_point = points[1, 1::3];
		show(check_point);
		//dist_to = sqrt((new_point[1]-check_point[1])^2 + (new_point[2]-check_point[2])^2);
	
		dist_to = dist_between_points(new_point, check_point);
		show(dist_to);
		if(dist_to<shortest_dist & dist_to>3*175,
			shortest_point = check_point
			shortest_dist = dist_to;
			shortest_idx = i;
			ang = atan(new_point[1]-check_point[1], new_point[2]-check_point[2])
		);
	);
	show(shortest_dist, shortest_idx);
	nearest_point_found = matrix({shortest_point[1], shortest_point[2], shortest_point[3], shortest_dist, shortest_idx, ang});
);


dist_between_points = function({point_a, point_b},
	dist_between = sqrt((point_a[1]-point_b[1])^2 + (point_a[2]-point_b[2])^2 + (point_a[3]-point_b[3])^2);
);


/*plan_path = function({point_1, point_2},
	a = 1;
);*/

//path_feasible_func = function({});

//waypoint_list

find_path = function({map, start, end},
	waypoint_list = matrix({{start[1], start[2], start[3], -1, 0}});
	show(waypoint_list);
	
	feasible_path_count = 0;
	height_c_planner = start[3];
	//while(feasible_path_count < 1,
	for(i=1, i<2, i++,
		show("while loop");
		test_point = generate_random_point(map, height_c_planner);
		show("test point");
		nearest_point_info = find_nearest_point(waypoint_list, test_point);
		show(nearest_point_info);
		nearest_idx = nearest_point_info[5];
		nearest_dist = nearest_point_info[4];
		//check if path is feasible.  for now assume that it is
		
		//ensure that the random point was good
		if(nearest_point_info[2] > 0,
			new_waypoint_data = matrix({{test_point[1], test_point[2], test_point[3], nearest_idx, waypoint_list[nearest_idx, 5] + nearest_dist}});
			waypoint_list |/= new_waypoint_data;
			show("waypoint added");
		);
		
		//check if the end is reachable
		dist_to_end = dist_between_points(end, test_point);
		if(dist_to_end < 150,
			last_idx = nrow(waypoint_list);
			new_waypoint_data = matris({{end[1], end[2], end[3], last_idx, waypoint_list[last_idx, 5]+dist_to_end}});
			waypoint_list ||= list(new_waypoint_data);
			feasible_path_count += 1;
			show("end added");
		);
		
	);
	//shortest_path = find_shortest_path(waypoint_list);
	//shortest_path;
	//waypoint_list;
);


find_path(matrix({5000, 5000}), {0, 0, -50}, matrix({5000, 5000, -50}));
